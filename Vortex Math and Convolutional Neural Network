import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, Flatten, Dense
from QuantConnect.Algorithm import QCAlgorithm
from QuantConnect import Resolution
from datetime import timedelta

class MLVortex(QCAlgorithm):
    def Initialize(self):
        self.SetStartDate(2014, 1, 1)
        self.SetEndDate(2024, 1, 1)
        self.SetCash(100000)

        self.assets = ["VTI", "IVV", "NVDA", "SPY", "QQQ"]
        for asset in self.assets:
            self.AddEquity(asset, Resolution.Daily)

        self.lookback_window = 252  # 1 year of data
        self.training_window = 756  # 3 years of training data
        self.prediction_days = 1
        self.rebalance_frequency = 5
        self.last_rebalance_time = self.StartDate

        self.InitializeModel()
        self.SetWarmUp(self.lookback_window + self.prediction_days)

    def InitializeModel(self):
        self.model = Sequential([
            Conv1D(filters=16, kernel_size=1, activation="relu", input_shape=(len(self.assets), 1)),
            Flatten(),
            Dense(10, activation="relu"),
            Dense(1, activation="sigmoid")
        ])
        self.model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

    def vortex_transform(self, data):
        return np.sin(np.pi * (data % 9) / 9)

    def OnData(self, data):
        if self.Time < self.last_rebalance_time + timedelta(days=self.rebalance_frequency):
            return

        # Extract historical data properly
        history = self.History(self.assets, self.lookback_window + self.prediction_days, Resolution.Daily)

        # Ensure history contains valid data
        if history.empty:
            self.Log("No historical data available. Skipping rebalance.")
            return

        self.data_raw = {asset: history.loc[asset]["close"].values for asset in self.assets}

        # Ensure equal data length across assets
        min_length = min(len(self.data_raw[asset]) for asset in self.assets)
        self.data = {asset: np.array(self.data_raw[asset][-min_length:]) for asset in self.assets}

        X = np.array([self.vortex_transform(self.data[asset]) for asset in self.assets]).T
        daily_means = np.array([self.data[asset] for asset in self.assets]).T.mean(axis=1)
        y = np.array([1 if daily_means[i+1] > daily_means[i] else 0 for i in range(len(daily_means) - 1)])

        if len(X) > self.training_window:
            X_train = X[:-1].reshape(-1, len(self.assets), 1)
            y_train = y
            X_train_split, y_train_split = X_train[-self.training_window:], y_train[-self.training_window:]

            self.model.fit(X_train_split, y_train_split, epochs=10, verbose=0)

        prediction = self.model.predict(X[-1].reshape(1, len(self.assets), 1), verbose=0)
        decision = "BUY" if prediction > 0.5 else "SELL"
        self.Log(f"Predicted trend for tomorrow: {decision} (Confidence: {prediction[0][0]:.2f})")

        for asset in self.assets:
            self.SetHoldings(asset, 0.2 if decision == "BUY" else -0.2)

        self.last_rebalance_time = self.Time
